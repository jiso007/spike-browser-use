import sys
import pytest
from typing import List, Dict, Any

# Adjust imports for the new project structure `browser-use-ext`
# print(f"sys.path inside test_agent_prompts.py: {sys.path}") # DEBUG PRINT - REMOVED
from browser_use_ext.agent.prompts import PromptVariable, SystemPrompt, DEFAULT_SYSTEM_PROMPT

@pytest.fixture
def sample_prompt_variables() -> List[PromptVariable]:
    """Provides a list of sample PromptVariable instances."""
    return [
        PromptVariable(name="user_query", description="The user\'s request", example_value="Find Italian restaurants near me."),
        PromptVariable(name="context", description="Relevant contextual information", example_value="Location: San Francisco, Time: 7 PM")
    ]

@pytest.fixture
def sample_system_prompt_template() -> str:
    """Provides a sample prompt template string."""
    return "You are an AI. User Query: {{user_query}}. Context: {{context}}. Respond helpfully."

@pytest.fixture
def sample_system_prompt(sample_prompt_variables: List[PromptVariable], sample_system_prompt_template: str) -> SystemPrompt:
    """Provides a SystemPrompt instance created with sample variables and template."""
    return SystemPrompt(
        name="TestAgentPrompt",
        template=sample_system_prompt_template,
        variables=sample_prompt_variables,
        description="A test prompt for AI agent.",
        version="0.1-test"
    )

def test_prompt_variable_creation():
    """Test basic PromptVariable Pydantic model creation."""
    name = "test_var"
    desc = "A test variable."
    ex_val = "example"
    pv = PromptVariable(name=name, description=desc, example_value=ex_val)
    assert pv.name == name
    assert pv.description == desc
    assert pv.example_value == ex_val

    pv_no_example = PromptVariable(name="no_ex", description="No example here.")
    assert pv_no_example.example_value is None

def test_system_prompt_creation():
    """Tests SystemPrompt creation and basic attributes."""
    template = "Test prompt with {variable}"
    prompt = SystemPrompt(template=template)
    
    assert prompt.template == template
    # Removed assertion for non-existent .name attribute

def test_format_prompt_all_vars_provided():
    """Tests format_prompt when all required variables are provided."""
    # Use a simple template for this test
    template = "Task: {task}, AgentID: {agent_id}, Actions: {action_descriptions}"
    prompt = SystemPrompt(template=template)
    
    task = "Perform a test task"
    agent_id = "test-agent-123"
    # Don't pass action_descriptions - it's generated by format_prompt
    
    formatted_text = prompt.format_prompt(task=task, agent_id=agent_id)
    
    # Check that the formatted text contains the task and agent_id
    assert f"Task: {task}" in formatted_text
    assert f"AgentID: {agent_id}" in formatted_text
    assert "Actions:" in formatted_text

def test_format_prompt_uses_example_values_if_provided_and_var_missing():
    """Test KeyError handling when template variables are missing."""
    # SystemPrompt.format_prompt catches KeyError and returns the template
    template = "Task: {task}, AgentID: {agent_id}, MissingVar: {missing_variable}"
    prompt = SystemPrompt(template=template)
    
    task = "Test task with missing var"
    agent_id = "agent-xyz"
    # missing_variable is NOT provided

    # Based on the implementation, format_prompt catches KeyError and returns the template
    result = prompt.format_prompt(task=task, agent_id=agent_id)
    # It should return the original template when there's a KeyError
    assert result == template

def test_format_prompt_raises_keyerror_if_var_missing_and_no_example(sample_system_prompt_template: str):
    """Test that missing template variables are handled gracefully."""
    # SystemPrompt catches KeyError and returns the template
    custom_template = "Query: {user_query}, Mandatory: {mandatory_field}"
    sp_custom = SystemPrompt(template=custom_template)
    
    # Provide task and agent_id (required) but not the custom fields
    result = sp_custom.format_prompt(task="test", agent_id="test", user_query="Some query")
    # It should return the original template when there's a KeyError
    assert result == custom_template

def test_format_prompt_with_no_variables_in_template():
    """Test formatting a template that has no variables defined in it."""
    static_template = "This is a static prompt with no variables."
    sp_static = SystemPrompt(template=static_template)
    # Must provide task and agent_id as format_prompt expects them
    formatted = sp_static.format_prompt(task="dummy", agent_id="dummy")
    # The template itself is static, but action_descriptions will be added
    assert static_template in formatted 

def test_default_system_prompt_exists_and_is_valid():
    """Tests that the DEFAULT_SYSTEM_PROMPT instance exists and has a valid template."""
    
    # Check that the instance exists
    assert DEFAULT_SYSTEM_PROMPT is not None
    
    # Check that it has a template attribute (as per SystemPrompt class)
    assert hasattr(DEFAULT_SYSTEM_PROMPT, 'template')
    assert isinstance(DEFAULT_SYSTEM_PROMPT.template, str)
    assert len(DEFAULT_SYSTEM_PROMPT.template) > 0 # Ensure template is not empty

    # Check that format_prompt can be called without KeyError for standard variables
    try:
        formatted_default = DEFAULT_SYSTEM_PROMPT.format_prompt(task="Test Default Task", agent_id="DefaultAgent")
        # You might add more specific checks on the formatted output if needed,
        # but for now, ensuring it doesn't raise KeyError is the goal.
        assert isinstance(formatted_default, str)
        assert len(formatted_default) > 0  # Should have content
    except KeyError as e:
        pytest.fail(f"DEFAULT_SYSTEM_PROMPT.format_prompt failed for standard vars: {e}")
    except Exception as e:
        pytest.fail(f"DEFAULT_SYSTEM_PROMPT.format_prompt raised unexpected error: {e}")

    # Removed assertion for non-existent .name attribute

def test_format_prompt_valueerror_on_other_exceptions():
    """Test format_prompt behavior with missing template variables."""
    # Based on the implementation, format_prompt catches KeyError and returns the template
    template = "This template has a {missing_var} that will cause a KeyError."
    prompt = SystemPrompt(template=template)
    
    # format_prompt catches KeyError and returns the original template
    result = prompt.format_prompt(task="task", agent_id="agent")
    assert result == template

def test_format_prompt_with_no_variables_in_template():
    """Test formatting a template that has no variables defined in it."""
    static_template = "This is a static prompt with no variables."
    sp_static = SystemPrompt(template=static_template)
    # Must provide task and agent_id as format_prompt expects them
    formatted = sp_static.format_prompt(task="dummy", agent_id="dummy")
    # The template itself is static, but action_descriptions will be added
    assert static_template in formatted 

# To run these tests:
# pytest browser-use-ext/tests/test_agent_prompts.py 